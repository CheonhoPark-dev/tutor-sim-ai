rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // 기본적으로 모든 접근 거부
    match /{document=**} {
      allow read, write: if false;
    }
    
    // 공통 함수
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // 사용자 컬렉션 규칙
    match /users/{userId} {
      // 기본 읽기 규칙
      allow read: if isAuthenticated();
      
      // 생성 규칙
      allow create: if isAuthenticated() 
        && isOwner(userId)
        && request.resource.data.role in ['user', 'admin']
        && request.resource.data.keys().hasAll(['email', 'displayName', 'role', 'preferences']);
      
      // 업데이트 규칙
      allow update: if isAuthenticated() 
        && (isOwner(userId) || isAdmin())
        && (!request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['role']) || isAdmin());
    }
    
    // 강의 컬렉션 규칙
    match /lectures/{lectureId} {
      // 읽기 규칙
      allow read: if isAuthenticated() 
        && (resource.data.userId == request.auth.uid || isAdmin());
      
      // 생성 규칙
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['title', 'content', 'userId', 'status'])
        && request.resource.data.status in ['draft', 'completed', 'reviewing'];
      
      // 업데이트 규칙
      allow update: if isAuthenticated()
        && resource.data.userId == request.auth.uid
        && request.resource.data.userId == request.auth.uid;
      
      // 삭제 규칙
      allow delete: if isAuthenticated()
        && (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // 학습 자료 컬렉션 규칙
    match /materials/{materialId} {
      // 읽기 규칙
      allow read: if isAuthenticated() 
        && (resource.data.userId == request.auth.uid || isAdmin());
      
      // 생성 규칙
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['title', 'type', 'url', 'userId']);
      
      // 업데이트 규칙
      allow update: if isAuthenticated()
        && resource.data.userId == request.auth.uid
        && request.resource.data.userId == request.auth.uid;
      
      // 삭제 규칙
      allow delete: if isAuthenticated()
        && (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // AI 피드백 컬렉션 규칙
    match /feedback/{feedbackId} {
      // 읽기 규칙
      allow read: if isAuthenticated() 
        && (resource.data.userId == request.auth.uid || isAdmin());
      
      // 생성 규칙
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['lectureId', 'content', 'type', 'category']);
      
      // 업데이트 규칙
      allow update: if isAuthenticated()
        && resource.data.userId == request.auth.uid;
      
      // 삭제 규칙
      allow delete: if isAuthenticated()
        && (resource.data.userId == request.auth.uid || isAdmin());
    }
  }
} 